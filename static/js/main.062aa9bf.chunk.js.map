{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","onEnd","state","listOfLink","length","newlist","slice","setState","videoId","onError","console","log","addLink","event","key","target","id","link","r","match","list","push","playVideo","this","linkJSX","map","e","i","className","onClick","TextField","onKeyPress","style","width","float","onChange","value","required","YouTube","opts","marginTop","height","playerVars","autoplay","onReady","_onReady","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0SA+HeA,E,YAvHb,aAAe,IAAD,8BACZ,+CAqBFC,MAAQ,WACN,GAAI,EAAKC,MAAMC,WAAWC,OAAQ,CAChC,IAAIC,EAAU,EAAKH,MAAMC,WAAWG,MAAM,EAAE,EAAKJ,MAAMC,WAAWC,QAClE,EAAKG,SAAS,CACZJ,WAAYE,EACZG,QAASH,EAAQ,OA3BT,EAgCdI,QAAU,WAER,GADAC,QAAQC,IAAI,2BACR,EAAKT,MAAMC,WAAWC,OAAQ,CAChC,IAAIC,EAAU,EAAKH,MAAMC,WAAWG,MAAM,EAAE,EAAKJ,MAAMC,WAAWC,QAClE,EAAKG,SAAS,CACZJ,WAAYE,EACZG,QAASH,EAAQ,OAtCT,EA2CdO,QAAU,SAACC,GAET,IAAmB,UAAdA,EAAMC,KAAuC,UAApBD,EAAME,OAAOC,KAAuC,OAApB,EAAKd,MAAMe,KAAe,CACtF,IAAIC,EACJA,EAAI,EAAKhB,MAAMe,KAAKE,MADR,oGAEZ,IAAIC,EAAO,EAAKlB,MAAMC,WACtBiB,EAAKC,KAAKH,EAAE,IACZ,EAAKX,SAAS,CACZJ,WAAYiB,EACZH,KAAM,KACL,kBAAMP,QAAQC,IAAI,EAAKT,MAAMC,iBAnDlC,EAAKD,MAAQ,CACXC,WAAY,CAAC,eACbc,KAAM,KACNT,QAAS,MALC,E,sEAQLK,GAEPA,EAAME,OAAOO,c,0CAITC,KAAKrB,MAAMC,WAAWC,QACxBmB,KAAKhB,SAAS,CACZC,QAASe,KAAKrB,MAAMC,WAAW,O,+BA2C3B,IAAD,OAUHqB,EACFD,KAAKrB,MAAMC,WAAWsB,KAAI,SAACC,EAAGC,GAC5B,OACE,wBAAIb,IAAKa,GAAI,QAAUA,EAAI,OAIjC,OACE,6BACE,6BACE,yBAAKC,UAAU,eACb,uBAAGZ,GAAG,QAAQY,UAAU,mCAAmCC,QAASN,KAAKX,SAAzE,SACA,kBAACkB,EAAA,EAAD,CACEC,WAAYR,KAAKX,QACjBoB,MAAO,CAAEC,MAAO,QAASC,MAAO,SAChCC,SAAU,SAACtB,GAAD,OAAW,EAAKN,SAAS,CACjCU,KAAMJ,EAAME,OAAOqB,SAErBA,MAAOb,KAAKrB,MAAMe,KAClBoB,UAAQ,EACRrB,GAAG,wBAKT,yBAAKY,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAACU,EAAA,EAAD,CACEV,UAAU,UACVpB,QAASe,KAAKrB,MAAMM,QACpB+B,KAvCG,CACXC,UAAW,MACXC,OAAQ,MACRR,MAAO,MACPS,WAAY,CACVC,SAAU,IAmCJ1C,MAAOsB,KAAKtB,MACZQ,QAASc,KAAKd,QACdmC,QAASrB,KAAKsB,YAGlB,yBAAKjB,UAAU,cACb,4BACGJ,U,GA7GGsB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShC,MACvB,2DCZNiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.062aa9bf.chunk.js","sourcesContent":["import React from 'react';\nimport YouTube from 'react-youtube';\nimport './App.css'\nimport TextField from '@material-ui/core/TextField';\n\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      listOfLink: [\"hiu9WSl4OKg\"],\n      link: null,\n      videoId: null,\n    }\n  }\n  _onReady(event) {\n    // access to player in all event handlers via event.target\n    event.target.playVideo();\n  }\n\n  componentDidMount() {\n    if (this.state.listOfLink.length) {\n      this.setState({\n        videoId: this.state.listOfLink[0],\n      })\n    }\n  }\n\n\n  onEnd = () => {\n    if (this.state.listOfLink.length) {\n      let newlist = this.state.listOfLink.slice(1,this.state.listOfLink.length)\n      this.setState({\n        listOfLink: newlist,\n        videoId: newlist[0],\n      })\n    }\n  }\n\n  onError = () => {\n    console.log('this is not a valid Url')\n    if (this.state.listOfLink.length) {\n      let newlist = this.state.listOfLink.slice(1,this.state.listOfLink.length)\n      this.setState({\n        listOfLink: newlist,\n        videoId: newlist[0],\n      })\n    }\n  }\n\n  addLink = (event) => {\n\n    if ((event.key === 'Enter' || event.target.id === 'Enter') && this.state.link !== null) {\n      let r, rx = /^.*(?:(?:youtu\\.be\\/|v\\/|vi\\/|u\\/\\w\\/|embed\\/)|(?:(?:watch)?\\?v(?:i)?=|\\&v(?:i)?=))([^#\\&\\?]*).*/;\n      r = this.state.link.match(rx);\n      let list = this.state.listOfLink;\n      list.push(r[1])\n      this.setState({\n        listOfLink: list,\n        link: ''\n      }, () => console.log(this.state.listOfLink))\n    }\n  }\n\n\n\n  render() {\n    const opts = {\n      marginTop: '100',\n      height: '390',\n      width: '640',\n      playerVars: {\n        autoplay: 1\n      }\n    };\n\n    let linkJSX = (\n      this.state.listOfLink.map((e, i) => {\n        return (\n          <li key={i}>{\"Link\" + (i + 1)}</li>\n        )\n      })\n    )\n    return (\n      <div>\n        <nav>\n          <div className=\"nav-wrapper\">\n            <i id=\"Enter\" className=\"material-icons prefix add-button\" onClick={this.addLink}>queue</i>\n            <TextField\n              onKeyPress={this.addLink}\n              style={{ width: \"500px\", float: \"right\" }}\n              onChange={(event) => this.setState({\n                link: event.target.value\n              })}\n              value={this.state.link}\n              required\n              id=\"standard-required\"\n            />\n\n          </div>\n        </nav>\n        <div className=\"main\">\n          <div className=\"video-player\">\n            <YouTube\n              className=\"youtube\"\n              videoId={this.state.videoId}\n              opts={opts}\n              onEnd={this.onEnd}\n              onError={this.onError} \n              onReady={this._onReady}\n            />\n          </div>\n          <div className=\"listoflink\">\n            <ul>\n              {linkJSX}\n            </ul>\n          </div>\n        </div>\n\n      </div>\n\n    );\n  }\n\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}